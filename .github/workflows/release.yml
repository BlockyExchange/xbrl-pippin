name: Build, Test, and Push Docker Image

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the version from the tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF##*/}
          VERSION=${VERSION#v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Install ocl-icd-opencl-dev
        run: |
          sudo apt-get update && sudo apt-get install -y ocl-icd-opencl-dev

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Tests
        run: |
          go test -v -parallel 1 $(go list -f '{{.Dir}}/...' -m | xargs)

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: bananocoin/pippin:latest,bananocoin/pippin:${{ env.VERSION }}
          build-args: VERSION=${{ env.VERSION }}

      - name: Build amd64 binary
        run: |
          GOARCH=amd64 go build -a -ldflags "-s -w -X main.Version=${{ env.VERSION }}" -o pippin-amd64 ./apps/cli
        env:
          GOOS: linux

      - name: Build arm64 binary
        run: |
          GOARCH=arm64 go build -a -ldflags "-s -w -X main.Version=${{ env.VERSION }}" -o pippin-arm64 ./apps/cli
        env:
          GOOS: linux

      - name: Upload amd64 binary
        uses: actions/upload-artifact@v2
        with:
          name: pippin-amd64
          path: pippin-amd64

      - name: Upload arm64 binary
        uses: actions/upload-artifact@v2
        with:
          name: pippin-arm64
          path: pippin-arm64

  create_release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download amd64 binary
        uses: actions/download-artifact@v2
        with:
          name: pippin-amd64
          path: .

      - name: Download arm64 binary
        uses: actions/download-artifact@v2
        with:
          name: pippin-arm64
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pippin-amd64
          asset_name: pippin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pippin-arm64
          asset_name: pippin-arm64
          asset_content_type: application/octet-stream
